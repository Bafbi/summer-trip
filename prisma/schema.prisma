// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Group {
  id              String         @id @default(cuid())
  name            String         @default("New Group")
  description     String?
  destination     String?
  startDate       DateTime?
  endDate         DateTime?
  location        LatLngLiteral? @relation(fields: [latLngLiteralId], references: [id])
  latLngLiteralId String?
  members         User[]
  Activities      Activity[]
  Message         Message[]

  @@index([latLngLiteralId])
}

model Activity {
  id      String @id @default(cuid())
  group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId String
  place   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String
  Vote    Vote[]

  @@index([groupId])
  @@index([placeId])
}

model Vote {
  id         String   @id @default(cuid())
  vote       Int
  activityId String
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([activityId])
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  groups        Group[]
  message       Message[]
  Vote          Vote[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String
  sender    User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId  String

  @@index([senderId])
  @@index([groupId])
}

// Google Places API
model Place {
  id                       String                 @id @default(uuid())
  partial                  Boolean                @default(true)
  placeId                  String?                @unique // id from Google Places API
  name                     String?
  location                 LatLngLiteral?         @relation(fields: [latLngLiteralId], references: [id]) // coordinates 
  json                     Json? // raw json from Google Places API
  businessStatus           String? // OPERATIONAL, CLOSED_TEMPORARILY, CLOSED_PERMANENTLY
  editorialSummary         PlaceEditorialSummary?
  formattedAddress         String? // formatted address : 123 Main St, City, State, Country
  internationalPhoneNumber String? // +1 123-456-7890
  openingHours             Json?
  permanentlyClosed        Boolean?
  photos                   PlacePhoto[]
  priceLevel               Int? // 0 => free, 1 => Inexpensive, 2 => Moderate, 3 => Expensive, 4 => Very Expensive
  rating                   Float?
  types                    Type[] // types : [restaurant, food, point_of_interest, establishment]
  reviews                  PlaceReview[]
  userRatingsTotal         Int?
  url                      String? // url to Google Maps
  vicinity                 String? // vicinity : City, State, Country
  website                  String?
  activity                 Activity[]
  latLngLiteralId          String?

  @@index([latLngLiteralId])
  @@index([placeId])
}

model PlaceEditorialSummary {
  id       String  @id @default(uuid())
  language String?
  overview String?
  place    Place   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId  String  @unique
}

model LatLngLiteral {
  id    String  @id @default(uuid())
  lat   Float
  lng   Float
  Place Place[]
  Group Group[]
}

model PlacePhoto {
  id             String  @id @default(uuid())
  main           Boolean @default(false)
  height         Int
  photoReference String  @unique
  width          Int
  blob           String?
  place          Place[]
}

model PlaceReview {
  id                      String @id @default(uuid())
  authorName              String
  authorPhotoUrl          String
  authorUrl               String
  language                String
  profilePhotoUrl         String
  rating                  Float
  relativeTimeDescription String
  text                    String
  time                    Int
  place                   Place  @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId                 String

  @@index([placeId])
}

model Type {
  id       String  @id @default(uuid())
  category String  @unique
  place    Place[]

  @@index([category])
}
